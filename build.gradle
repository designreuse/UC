// apply plugin: 'jacoco'
apply plugin: 'build-dashboard'

defaultTasks 'clean', 'build'

def buildTime = new Date();

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

subprojects {
    group = 'com.yealink'
    version = '1.0.0'
    apply plugin: 'java'
    apply plugin: 'maven'

    // apply plugin: 'eclipse'
    // apply plugin: 'jacoco' 单元测试覆盖率检测

    // jacoco {
    //		toolVersion = "0.7.1.201405082137"
    // }
    //  jacocoTestReport {
    //	reports {
    //   				xml.enabled false
    //   				csv.enabled true
    //   				html.enabled true
    //		}
    //		additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    //	}


    project.ext['project.build.time'] = buildTime.format('yyyyMMdd-HHmmss')

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        testCompile(
                'junit:junit:4.9',
                'org.mockito:mockito-core:1.9.5'
        )
    }

    // test.finalizedBy(jacocoTestReport)


    buildDir = "${rootDir}/build/${name}"

    afterEvaluate {
        tasks.withType(Jar) {
            manifest {
                attributes 'Implementation-Title': project.name,
                        'Implementation-Version': project.version,
                        'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                        'Built-With': "gradle-${project.gradle.gradleVersion}, groovy-${GroovySystem.version}",
                        'Built-By': System.getProperty('user.name'),
                        'Built-On': "${InetAddress.localHost.hostName}/${InetAddress.localHost.hostAddress}",
                        'Build-Time': buildTime.format('yyyy/MM/dd HH:mm:ss')
            }
        }
    }

    task mkdirs << {
        description = 'create project folder skeleton.'
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
}

def springVersion = '4.1.4.RELEASE'
def servletAPIVersion = '3.0'
def jspAPIVersion = '2.2'
def jstlVersion = '1.2'
def aspectjVersion = '1.7.4'
def jsonLibVersion = '2.4'
def sitemeshVersion = '2.4.2'
def slf4jVersion = '1.7.13'
def logbackVersion = '1.1.1'
def commonsCodecVersion = '1.9'
def hibernateValidatorVersion = '5.0.2.Final'
def dom4jVersion = '1.6.1'
def jxlVersion = '2.6'
def mailVersion = '1.5.0-b01'
def fileuploadVersion = '1.3.1'
def javaCsvVersion = '2.0'
def httpClientVersion = '3.1'
def apacheCommonsLangVersion = '3.3'

def mongodbDriverVersion = '3.2.2'
def jerseyVersion = '2.22.2'
def activemqVersion = '5.13.2'
def jpinyinVersion = '1.0'
def guavaVersion = '18.0'
def apachePoiVersion = '3.7'
def velocityVersion = '1.7'
def jacksonVersion = '2.5.4'
def javaxValidationVersion = "1.1.0.Final"
def httpClient = "4.3.3"
def ganyMedVersion = "262"
def httpMimeVersion = "4.5.2"


project(':uc-platform') {
//    apply from: file("${rootDir}/gradle/quality.gradle")

    dependencies {
        compile(
                files("${rootDir}/lib/ws_client.jar"),
                "org.apache.velocity:velocity:${velocityVersion}",
                "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}",
                "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
                "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
                "com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:${jacksonVersion}",
                "org.glassfish.jersey.ext:jersey-entity-filtering:${jerseyVersion}",
                "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}",
                "org.glassfish.jersey.core:jersey-client:${jerseyVersion}",

                "org.slf4j:jcl-over-slf4j:${slf4jVersion}",
                "org.slf4j:slf4j-api:${slf4jVersion}",
                "ch.qos.logback:logback-classic:${logbackVersion}",
                "org.apache.commons:commons-lang3:${apacheCommonsLangVersion}",
                "commons-codec:commons-codec:${commonsCodecVersion}",
                "org.springframework:spring-core:${springVersion}",
                "org.springframework:spring-aop:${springVersion}",
                "org.springframework:spring-expression:${springVersion}",
                "org.springframework:spring-beans:${springVersion}",
                "org.springframework:spring-web:${springVersion}",
                "org.springframework:spring-aspects:${springVersion}",
                "org.springframework:spring-context:${springVersion}",
                "org.springframework:spring-context-support:${springVersion}",
                "org.springframework:spring-webmvc:${springVersion}",
                "org.springframework:spring-tx:${springVersion}",
                "org.springframework:spring-orm:${springVersion}",
                "org.springframework:spring-test:${springVersion}",

                "org.glassfish:javax.servlet:${servletAPIVersion}",
                "javax.servlet.jsp:jsp-api:${jspAPIVersion}",
                "javax.servlet:jstl:${jstlVersion}",
                "org.aspectj:aspectjrt:${aspectjVersion}",
                "org.aspectj:aspectjweaver:${aspectjVersion}",
                "net.sf.json-lib:json-lib:${jsonLibVersion}:jdk15",
                "opensymphony:sitemesh:${sitemeshVersion}",
                "org.hibernate:hibernate-validator:${hibernateValidatorVersion}",
                "javax.validation:validation-api:${javaxValidationVersion}",
                "dom4j:dom4j:${dom4jVersion}",
                "jexcelapi:jxl:${jxlVersion}",
                "javax.mail:mail:${mailVersion}",
                "commons-fileupload:commons-fileupload:${fileuploadVersion}",
                "net.sourceforge.javacsv:javacsv:${javaCsvVersion}",
                "commons-httpclient:commons-httpclient:${httpClientVersion}",
                "org.apache.activemq:activemq-client:${activemqVersion}",
                "com.github.stuxuhai:jpinyin:${jpinyinVersion}",
                "com.google.guava:guava:${guavaVersion}",
                "org.apache.poi:poi-ooxml:${apachePoiVersion}",
                "org.mongodb:mongodb-driver:${mongodbDriverVersion}",
                "org.apache.httpcomponents:httpclient:${httpClient}",
                "org.apache.httpcomponents:httpmime:${httpMimeVersion}"

        )

    }
}

project(':uc-common') {
    dependencies {
        compile(
                project(':uc-platform')
        )

        runtime(

        )

        testCompile(

        )
    }
}

project(':uc-web') {
    apply from: file("${rootDir}/gradle/web.gradle")
//    apply from: file("${rootDir}/gradle/quality.gradle")

    dependencies {
        compile(
                project(':uc-common'),
                project(':uc-service-interface')
        )

        runtime(

        )

        testCompile(
        )
    }
}

project(':uc-service-interface') {

    dependencies {
        compile(
                "org.springframework:spring-web:${springVersion}",
                "org.hibernate:hibernate-validator:${hibernateValidatorVersion}"
        )
    }
}



project(':uc-service') {
    apply from: file("${rootDir}/gradle/web.gradle")
    dependencies {
        compile(
                project(':uc-common'),
                project(':uc-service-interface')
        )

        runtime(

        )

        testCompile(

        )
    }
}

project(':uc-imweb') {
    apply from: file("${rootDir}/gradle/web.gradle")
//    apply from: file("${rootDir}/gradle/quality.gradle")

    dependencies {
        compile(
                project(':uc-common'),
                project(':uc-service-interface')
        )

        runtime(

        )

        testCompile(
        )
    }
}


project(':uc-ofweb') {
    apply from: file("${rootDir}/gradle/web.gradle")
//    apply from: file("${rootDir}/gradle/quality.gradle")

    dependencies {
        compile(
                project(':uc-common'),
                project(':uc-service-interface'),
                "ch.ethz.ganymed:ganymed-ssh2:${ganyMedVersion}"
        )

        runtime(

        )

        testCompile(
        )
    }
}

project(':uc-api') {
    apply from: file("${rootDir}/gradle/web.gradle")
//    apply from: file("${rootDir}/gradle/quality.gradle")

    dependencies {
        compile(
                project(':uc-common'),
                project(':uc-service-interface')
        )

        runtime(

        )

        testCompile(
        )
    }
}
